{"version":3,"sources":["Gridbox.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["ENDPOINT","styles","squaregrid","height","display","gridTemplate","gridGap","Gridbox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","send","value","x","y","currentCell","state","cells","color","onColor","col","offColor","console","log","socket","emit","flipCell","setState","renderCells","map","row","cell","react_default","a","createElement","key","concat","style","backgroundColor","onClick","Array","fill","socketIOClient","_this2","on","_ref","_ref2","Component","Dashboard","src_Gridbox","App","src_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a0bb70a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport socketIOClient from 'socket.io-client'\n\n// const ENDPOINT = 'http://localhost:8081'\nconst ENDPOINT = '/'\n\nconst styles = {\n  squaregrid: {\n    height: \"auto\",\n    display: \"grid\",\n    gridTemplate: \"repeat(100, 10px) / repeat(100, 10px)\",\n    // gridTemplate: \"repeat(10, 3vw) / repeat(10, 3vw)\",\n    gridGap: \"1px\"\n  },\n};\n\nclass Gridbox extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      onColor: 'red',\n      offColor: 'green',\n      cells: Array(100).fill().map(() => Array(100).fill({col:'green'}))\n    };\n    this.socket = socketIOClient(ENDPOINT)\n  }\n\n  componentDidMount() {\n    this.socket.on('flip box', ({value, x, y}) => {\n      this.flipCell(value, x, y)\n    })\n    this.socket.on('init', ({ cells }) => {\n      this.setState({cells})\n    })\n  }\n  send = (value, x, y) => {\n    const currentCell = this.state.cells[x][y]\n    let color = this.state.onColor;\n    if (currentCell.col === this.state.onColor) {\n      color = this.state.offColor\n    }\n    console.log(\"TCL: send SOCKET flip box-> \", value, color, x, y)\n    this.socket.emit('flip box', {color, x, y})\n  }\n\n  flipCell = (col, x, y) => {\n    const cells = this.state.cells\n    cells[x][y] = { col };\n    this.setState({cells})\n  }\n\n  renderCells = () => {\n    return this.state.cells.map((row, x) => {\n      return (\n        row.map((cell, y) => {\n          return (\n            <div key={`${x}-${y}-${cell.col}`}\n              style={{backgroundColor:cell.col}}\n              onClick={() => {\n                this.send(cell.col, x, y)\n            }}></div>\n          )\n        })\n      )\n      \n    })\n  }\n  render() {\n    return (\n      <div style={styles.squaregrid}>\n        {this.renderCells()}\n    </div>\n    )\n  }\n}\n\nexport default Gridbox;\n","import React, { Component } from 'react';\nimport Gridbox from './Gridbox'\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  };\n  }\n  render() {\n    return (\n      <div>\n          <Gridbox />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport Dashboard from './Dashboard'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  };\n  }\n  render() {\n    return (\n      <Dashboard/>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}